// Generate QR
        public void QRPay()
        {

            string keyId = "154eb31c-0f72-45bb-9249-84a1036fd1ca";
            string b2sUrl = "";
            string s2sUrl = "";

            string txnReq = "{ \"ss\":\"1\",\"msg\":{ \"netsMid\":\"UMID_877772003\",\"tid\":\"\",\"submissionMode\":\"B\"," +
            "\"txnAmount\":\"10\",\"merchantTxnRef\":\"" + DateTime.Now.ToString("yyyyMMddHHmmssfff") + "\",\"merchantTxnDtm\":\"" + DateTime.Now.ToString("yyyyMMdd HH:mm:ss.fff") + "\",\"paymentType\":\"SALE\"," +
            "\"currencyCode\":\"SGD\",\"paymentMode\":\"\",\"merchantTimeZone\":\"+8:00\",\"b2sTxnEndURL\":\""+b2sUrl+"\"," +
            "\"b2sTxnEndURLParam\":\"&var1=test&var2=test1\",\"s2sTxnEndURL\":\""+s2sUrl+"\",\"s2sTxnEndURLParam\":\"&var3=test&var4=test1\"," +
            "\"clientType\":\"W\",\"supMsg\":\"\",\"netsMidIndicator\":\"U\",\"ipAddress\":\"127.0.0.1\",\"language\":\"en\"} }";

            byte[] Shastr = ComputeSha256HashForQR(txnReq, secretKey: "38a4b473-0295-439d-92e1-ad26a8c60279");

            string hmac = Base64EncodeForQR(Shastr);

            string htmlQR = "<html><head><meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'><title>Merchant Page</title>";
            htmlQR += "<script src='https://uat2.enets.sg/GW2/js/jquery-3.1.1.min.js' type='text/javascript'></script><script src='https://uat2.enets.sg/GW2/pluginpages/env.jsp'></script>";
            htmlQR += "<script type='text/javascript' src='https://uat2.enets.sg/GW2/js/apps.js'></script></head>";
            htmlQR += "<body>";
            htmlQR += "<input type='hidden' id='txnReq' name='txnReq' value='"+txnReq+"'>";
            htmlQR += "<input type='hidden' id='keyId' name='keyId' value='"+ keyId + "'>";
            htmlQR += "<input type='hidden' id='hmac' name='hmac' value='"+hmac+"'>";
            htmlQR += "<div id='anotherSection'>";
            htmlQR += "<fieldset>";
            htmlQR += "<div id='ajaxResponse'></div>";
            htmlQR += "</fieldset>";
            htmlQR += "</div>";
            htmlQR += "<script> ";
            htmlQR += "window.onload = function() { ";
            htmlQR += "var txnReq = document.getElementById('txnReq').value;";
            htmlQR += "var keyId = document.getElementById('keyId').value;";
            htmlQR += "var hmac = document.getElementById('hmac').value;";
            htmlQR += "sendPayLoad(txnReq, hmac, keyId);";
            htmlQR += "};";
            htmlQR += "</script>";
            htmlQR += "</body>";
            htmlQR += "</html>";

            Response.Write(htmlQR);
            Response.End();

        }

        // b2s
        public void QRPleaseWait()
        {
            clsDomain_Email e = new clsDomain_Email();
            string hmac = Request["hmac"];
            string message = Request["message"];
            
            string myDecodedString = HttpUtility.UrlDecode(message);

            var SteamDetails = JsonConvert.DeserializeObject<dynamic>(myDecodedString);
            Response.Write(myDecodedString);
            Response.End();

        }

        //s2s
        public void QRResponseData([FromBody]ENETSModels e)
        {
            
		// Get Response frepm eNETS
            var bodyStream = new StreamReader(System.Web.HttpContext.Current.Request.InputStream);
            bodyStream.BaseStream.Seek(0, SeekOrigin.Begin);
            var txnRes = bodyStream.ReadToEnd();


            if (Request.Headers["hmac"] != null)
            {
                String macFromGW = Request.Headers["hmac"].ToString();
                byte[] Shastr = ComputeSha256HashForQR(txnRes, secretKey: "9905c100-c94f-4327-afd5-4d8f818062f2");
                string hmac = Base64EncodeForQR(Shastr);

                if (hmac.Equals(macFromGW, StringComparison.InvariantCultureIgnoreCase))
                {
                     //hmac success
                }
                else
                {
                    //hmac fails
                }

            }
            else
            {
                //hmac empty
            } 
            
        }
        


        private byte[] ComputeSha256HashForQR(String txnReq, String secretKey)
        {
            string rawData = txnReq + secretKey; 
            using (SHA256 sha256Hash = SHA256.Create())
            { 
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
                
                return bytes;
            }

           
        }

        private static string Base64EncodeForQR(byte[] plainText)
        {
            return System.Convert.ToBase64String(plainText);
          
        }


		/*
		//System.Security.Cryptography.SHA256 
		private string GetSignature(string txnReq,string secretKey){
			
		   using (SHA256 sha256Hash = SHA256.Create())
		   {
			  byte[] hash = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(txnReq+secretKey));
			  return System.Convert.ToBase64String(hash);
		   }
		}

		*/